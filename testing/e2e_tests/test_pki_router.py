import asyncio
from pki_service.app.main import health_check
import pytest
import httpx
from pki_service.app.routers.v1.serv import create_cert, renew_cert, crl_mgmt, get_server_uc
from pki_service.app.schema.serv import CertCreateReq, CertUpdate, CrlMgmtReq
from pki_service.usecase.serv import ServerUsecase, Status
from pki_service.adapter.server_cli import ServerCli


class TestPKIRouter:

    def setup_method(self):
        self.client = httpx.AsyncClient()
        self.server_cli = ServerCli(self.client)
        self.server_usecase = ServerUsecase(self.server_cli)

    @pytest.mark.asyncio
    async def test_health(self):
        result = await health_check()
        print(f"resp: {result}")
        assert result is not None

    async def _create_cert(self, csr: str, sk_lmk: str, algo: str):
        cert_req = CertCreateReq(
            csr=csr, sk_lmk=sk_lmk, cert_level="ROOT_CA", algo=algo)
        resp = await create_cert(cert_req, self.server_usecase)
        if resp and resp.status == "success":
            return resp.cert

    async def _renew_cert(self, cert: str, sk_lmk: str, algo):
        cert_update = CertUpdate(
            cert=cert, issuer_cert=cert, sk_lmk=sk_lmk, cert_level="ROOT_CA", algo=algo)
        resp = await renew_cert(cert_update, self.server_usecase)
        if resp and resp.status == "success":
            print(f"renewed cert: {resp.cert}")
            return resp.cert

    async def _crl_mgmt(self, cert: str, sk_lmk: str, algo: str):
        crl_req = CrlMgmtReq(
            cert=cert, issuer_cert=cert, sk_lmk=sk_lmk, algo=algo)
        resp = await crl_mgmt(crl_req, self.server_usecase)
        if resp and resp.status == "success":
            print(f"crl: {resp.crl}")
            return resp.crl

    @pytest.mark.asyncio
    async def test_create_cert_ecp256(self):
        csr = "MIIBCTCBsAIBADBQMQswCQYDVQQGEwJFRzEOMAwGA1UECAwFQ2Fpcm8xDjAMBgNVBAcMBUNhaXJvMQ8wDQYDVQQKDAZQYXltb2IxEDAOBgNVBAMMB1Jvb3QtQ0EwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAT7I2NbVKqceyJwCqu7NWKn3GS_75lgOhPMrmiv6s9MASgZqaKrsGok0GoKmAvygXM3IWWr_HFhLlxvXmkWrGn3MAoGCCqGSM49BAMCA0gAMEUCIFtVH0mZNM968gRvPPGrnU2o7rzltwHsOxoe14Fq3gnUAiEAuUnFuwzLEqygQvbfkMbrFmwozfRBxeimGro2D79kntI="
        sk_lmk = "RDAzMzZTMEVTMDBFMDAwMDAyODkwQjAxMzM5MzRGOUZBQjVDNjg0ODhCQjVBMzI3N0I0OUM3RTlGOTk1MDhEOUYyMzg3OTNFREJDQjlBNDlDN0E2NUE2OTQzM0QwMEJDMTVFRDcwNzMzRTI1OUNGRTBGNkMwNDgyMzhBMTVBOEUwODg0NDFDMTg3NzVDNDc5OEFBQjA2RUZDOEI2ODg3MEVGRkU1MjEyQTEzQzc1QkY5RUQ5NkExOEZENjMwM0I1NUIwNTA3Qjg5OEE3NzAzMEZBOTU2MUY4REExQTExRjEwQ0JGMDU2OEVEQUIwRTcwQjk3MUIyRDYyNjdBRUEwNkMzOUM3MzREQkFENDA1QkY2OENCMEUzMDc0MzAxMkRFNTA4NDQ4MTEzNEIzQkUzRDI5OTkwMTE1Q0QwMEZGNjE2RjE4OTlEMzQyOTBDNzVC"
        cert = await self._create_cert(csr, sk_lmk, "ECP256")
        assert len(cert) > 0
        assert isinstance(cert, str)

    @pytest.mark.asyncio
    async def test_create_cert_r2k(self):
        csr = "MIICkTCCAXkCAQAwUDELMAkGA1UEBhMCRUcxDjAMBgNVBAgMBUNhaXJvMQ4wDAYDVQQHDAVDYWlybzEPMA0GA1UECgwGUGF5bW9iMRAwDgYDVQQDDAdSb290LUNBMIIBIDALBgkqhkiG9w0BAQEDggEPADCCAQoCggEBANjv2EK6R8oM16NtFrqFMoyjN0FZqfsuvBgFTQ_menVoml2M6PbrVOv48hYoWMThl8RL5vBnKRlZgYFY7Dhv3hlQu0Vz0T3yvTxHyBh-X1oJQzThhXAmtNJlUbBDLtLRTveIeJplruMTmKpcEdusz99a_-3G79yEvJtvftoL2h8P_zT7RwGpq9PuyxgcVgbOYXkArZf6ii3b4SSPbyip1yeyEUnqgYSQ3WmgP02unWLZCNAHtSxyOqRlDc40NeeJB0XpGS9s5xMiMKV8CWudxf0o0IXBr_GNXIGIqFhazmWkkYV-v97x7Xm5ILhorjfgvptFNF0doqqFBiIm1RU2XD8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAZohUMVNnZNRTjVHDkGAI5dMDu2OT-7HbnHnZIvVMTuirU1mQ_Ri0oT5rZNCPaoe4Zt8OoInk72FiifesNsBYLEH4jXSctRGnoVgmAvyhyenEbG171xOl7roBn2fwBFT4URa5jABJ1orMfuOCQas6ZPy8B4-Sw-hR9v_frX8Uc0fycCm8qyg-p_X7CCx1JuahZOwnIcet1Tq-QXoLjq0liiMmNv-79oPKca17Mxhmgg9ko2NbEAcyYyiGOdhwsArMGd2VFXjT4NLd_8t6IJpPEoYFUlzkdjXP3SHcSLWIBwYvn1GpiYt6UViO7KEz1W9Muk4RVE5insR3QPjAZTlaag=="
        sk_lmk = "RDI1MTJTMEVTMDBFMDAwMDYxQjA3RTZBNTQyNzdCOTMyRjU4MDRERTk3NzhBMzRFM0VDQjVGQjQ0OEYzRDI2ODRFMDhBMjYyNjkzMUY4MUFGQ0Q0NjY0NjA1QUJDMUQwRDhGNzI2QjYxOEE4MzhFODA2OUQyNDgyQjRBOTk0QUY1MzZEMzkxQTBEMEY5OUM0ODk3NDI0NUMwNEJCN0MzQ0NBNEE2QTZFMzNBQzM0Mjg0ODlBMEIxRUEyOTE4Q0ZDQzFERDZFQUZEMUZEOEQzMTg3ODEzMjU0OEI4MTdEQTdCQ0JENDMwQzY2NjA5RjgwODYyMEQwMzBDRDVCN0JCM0ZBMDNCMzU0Q0VFQTcwREI1Q0E3NDAzNDI5NzdCOEM0RjhEN0UxQUNCMTFEOTgzNjZCNDg4OTJEQjU5RDc2QTEwOEU1QTdEODUwRTNGNTEzNTNGMzJBRkNFN0JBQTk2NTM2RDU3NzM3Q0I4MTk3RUM4MzFBN0E3QjI0OTk4MUZERkI0NkNCNjk0OUQ3OTFEN0ZBQTQ3QjEzNDA1MkRFRTY4MEU0RjJDNEI2MTA3N0VEMTRDQ0I0NkRFRjhEODhBODVGNjQ2NEVGQTRFMzBCNkJGMkFDNjRBQzk4OTg2MkI4QTQ4MDBERUEwQTJERTQ2QTJBMzg3NzVEMzIxRDU0RjRFNzQ3MUY0MkRDMDEzRTRCMTM3ODQxMTJDN0JBNEM2QUMwQTBGMjUwNUQ3QjI5OTdDMUY1MjVGNUM5MjM2MUYyOUU3QURGRTFERjM2NkUyQzZFRUEwRDI1NkI3NDZEMjFENTVGMTYxNzAzQjI0RjRBNjQ2NkYwQzRBNjI5MzlEN0UxRDU1QTRFQ0E0NjUyRkQ2MzhFREE0MjM3MDQ4QkQyQ0ZFMzQwREYzQkREQkY3NjE3OTUzRTFDRjhENzEwODQ0QTMxNTI0MkMzM0E2OUFGRUQyRTg5MTQyRDE4MTU5QzM3RkI2RDdGNDREMTA0NDBEMEZGQTg4MTI1MjUxMDZGQUE0Q0U3NEUzODBDMjY1RDI2RTYzNkMxQzA4QUY3RTNERTNDMjNEQUY2NDdDMTRBNkM0RjFERjU5NDUwRTA1QjgwMDgzQjUzMDVFRkUwNTI3MDNGNjFGM0FBODNCRDUwQ0IwMjA1NjQxQzdDMUM3MjA5NzQzN0JEMzJEMjYwM0UzMTQ0NjNEQzUwMDY5OTkyNUFBNDI0NUZCNkRENTVFRTY4QTlFODVBRTRCRDM3Q0U0OTJGNDkzOTA1RTJDMDMzMTExQTE2MDUwM0NEMUY2QjE2ODAyQ0MwOTEzMjAwOTIyQ0JDOTVGMkYyRDg1RTdGRjBENkZGMEJDNzg5RUIyMzFFM0RCRDVGMjFGRTg2Q0NBQzIxQTY2ODEwNTQ5QzE5QkYxMjQwNEFEMTUyRTMyM0U2NDJCQkU0NEUxNTY1RDBCMURFRTlFNjlBMzIxQjcxNDkzNzNCRjIyMUQ0MzRBNEYyMDQ3MUJBMzMyNDRFQkRFRTMyMjgyOEVDODM5OUNFM0QzMURENzQwQzk5MTJEN0YwNEY0RTcxN0EwNjc2RkQwQUQ4QUI5QjhDM0U5Q0RGRTFDRjk2NTk5M0QzN0FEQzRDMDMyMkZCNzNENTg5RkFFQzJDQjIwOTJEREU3OUM4MDEwQ0Y0RUNFMDMwRDhEMDk1RjI5QTg1QkY2MEFFODQ2RDUyOTY3RUJDQjE2QjE5ODZDM0FBNkQ2OUYyMjE2MUQ5Q0JGRUE2RDg4RTgzQUZCRjg3Njg4OTkyRTU4RkEwQUExNzQwOEU0QTc1MTg4RUFBODhDODVDODcyNDYwNDI4RkVGNDBFNzJCODcxNTgzRkYzOUNENzY3NjcyQjE4QTY4ODJDMThCMERGNTJGRTIyQjRGNEZGRjZFQzk2QzEyQjVCQjA0MjY3MjJDNjcyMzA0ODY5MTg4OTU2NTgxQjc2RTZFQkY1NUFCQzgyOEU2NTdGRUNGRkUzREU2RjgzMTQ2QzdCODgxMUJBNkJFRTgzMTIwRjdFQTMyRkFGNkQ0QTkyM0E1NzdCMzQ2M0U0Q0MxMEVBOTk2QkVGODM3NDVGQjgzN0ZGQ0YzNDY4REQzOENGOTdENENBRjAyOTZCRUNBMTAyM0Y4NjYxMUMzRDFBRjhCOUM4RjI0NjVDMUI0NzBGOUYyN0U3MTBDMzlCNTMzNjZBODM1QkEyMEFDNkVFMDY3OTI0NkM3REY1OEU1OURBNkEzODdBQzUzOTE4Mjg1Mjc1QjQxQUM4OTc3MDZDMzk4RDNERTYxOUM4MkUyNEFDOTIxQjQ3MjNGRDdDRTQyMjA4OTEzRDMxQjY5NzAzQzYwODhEMTgxMzhERTk1MTNEMEZEQjcyMUE2M0VFRTk1RDRBRkZBRTIxMjJFRDBDRDRBRDk2MzQzOUFFODUyQjJBOTMzMTgxQTk3NTlBQUI2NTI0MzU2ODYwNTRCREMwMDkwNEI0QUNGQTZCMzdDNTU4ODhCRDhDMkFCQjc0MjQ2NTQ1RTE4NzlFRDUzNDhEQkREOTdEMzg3OUI1NjJDMjQ0RTQzMkU2M0NBMEU3NDgxMDhCRUU4Q0Q3NTUyQ0Q2Mjc5NTQxRkNFMTFCOTdCNUFGMzcyRjRBNkEyODcwQ0JBNjcyMUMzNERFRDJEMkRBQTUwQ0QyNzRBODVCNDNGQkNDMTNCNDdBQTI1MzhFRUVFRkU4MzMyMjA4NkRBN0Q2MjMzQ0RGNUY3QkQ2QkU5NEU2RjFBODExOTkxNzJGQjA0ODY4RDU0RDZCRkVEQjhCN0YzM0JBQkY5Q0I3RkE2REJCMDA4NDMwMDUwQTVCQjFCREM3OTJEOTZCQjA5QjQwNDgzM0E4MUM3OEQ5MTlCRDE5NkI4RjFBMURGQUMxMTMwMzY2Qjk0RjkzNjE3QTQ1NkQ0ODA5RkM3NjE4QzRCOTkzOURBMkFENDUwNzE3MDhGODNGODhDRTg4NEVDNUI1M0VDQUVDMEJFQTU0NzRGQTA5OURDNjg3MTAzRkE4NzUxMjhGNzFBMDVBREZFNkI5NTdDMEJGRUVGNTdDQjQ2OUUyQkVGNDE2NzYyN0Y4NTAwRDVEQUQ4RDAyMENCRTZCMDVGQkRBNTIwRTc0OUFERDEwM0NCNjM2MUI3RTBGQ0ZDQzQxRDI3OUUyMjk1MEM0Q0UzQkY4QzAwRTlERTYzNzA2RUJBRDIyRkFGQjU3QUQ0QTM2MjJFRTY3RDQ1NjBCNzE2NjY5Q0Y4RTNGODJBNjIxQjU0NTZGRDk1MjU2QTZBMjM4QUUyQkFEN0I4NjlBNzYzMTU3NzQwOTEwNTFGQjQ2MTNERDIxQjNBNTVCMw=="
        cert = await self._create_cert(csr, sk_lmk, "R2K")
        assert len(cert) > 0
        assert isinstance(cert, str)

    @pytest.mark.asyncio
    async def test_renew_cert_r2k(self):
        cert = "MIIDajCCAlSgAwIBAgIIGGYC2wHUAZAwCwYJKoZIhvcNAQELMFAxCzAJBgNVBAYTAkVHMQ4wDAYDVQQIDAVDYWlybzEOMAwGA1UEBwwFQ2Fpcm8xDzANBgNVBAoMBlBheW1vYjEQMA4GA1UEAwwHUm9vdC1DQTAeFw0yNTA5MTcwNzU3MjRaFw0yNjA5MTcwNzU3MjRaMFAxCzAJBgNVBAYTAkVHMQ4wDAYDVQQIDAVDYWlybzEOMAwGA1UEBwwFQ2Fpcm8xDzANBgNVBAoMBlBheW1vYjEQMA4GA1UEAwwHUm9vdC1DQTCCASAwCwYJKoZIhvcNAQEBA4IBDwAwggEKAoIBAQDY79hCukfKDNejbRa6hTKMozdBWan7LrwYBU0P5np1aJpdjOj261Tr-PIWKFjE4ZfES-bwZykZWYGBWOw4b94ZULtFc9E98r08R8gYfl9aCUM04YVwJrTSZVGwQy7S0U73iHiaZa7jE5iqXBHbrM_fWv_txu_chLybb37aC9ofD_80-0cBqavT7ssYHFYGzmF5AK2X-oot2-Ekj28oqdcnshFJ6oGEkN1poD9Nrp1i2QjQB7UscjqkZQ3ONDXniQdF6RkvbOcTIjClfAlrncX9KNCFwa_xjVyBiKhYWs5lpJGFfr_e8e15uSC4aK434L6bRTRdHaKqhQYiJtUVNlw_AgMBAAGjTjBMMCkGA1UdDgQiBCALk1Ot-NUPYzG7YyJkFIE7kGnx3Wcip6EAsYMsIrjEwjAPBgNVHRMBAf8EBTADAQH_MA4GA1UdDwEB_wQEAwIBhjALBgkqhkiG9w0BAQsDggEBAFK6TaAORcwSnlG8az-bsC1oaLSEgrPTByJnsDB00kb0-8Qgj8mmddtxeRBCMXxPtubIIG39LD3oqdH46yWEMO7yWbiEoTQR4oZIhvn8p0f-DOgoyxJ3S86fD2_N5n-3S-SIa0eXtuc1r1iJxazQwDomlSW3sMTIvuKKugE9x3ytyT-vknAi-rm7m4gpFYDjpzJ34l4A3Fcyy3_kP0n4Aq4mxgyCC-8dVV3g6z5yL_ILwBAp5BfqFSy8xgN0qpE5n3luewDRjHELK_yNg3zOjzikeG9ADR-h9OyynDERb_l7-vc8EGfs4gUn9swx6cIrpeGGjiVZxfG6sMDsabYCziE="
        sk_lmk = "RDI1MTJTMEVTMDBFMDAwMDYxQjA3RTZBNTQyNzdCOTMyRjU4MDRERTk3NzhBMzRFM0VDQjVGQjQ0OEYzRDI2ODRFMDhBMjYyNjkzMUY4MUFGQ0Q0NjY0NjA1QUJDMUQwRDhGNzI2QjYxOEE4MzhFODA2OUQyNDgyQjRBOTk0QUY1MzZEMzkxQTBEMEY5OUM0ODk3NDI0NUMwNEJCN0MzQ0NBNEE2QTZFMzNBQzM0Mjg0ODlBMEIxRUEyOTE4Q0ZDQzFERDZFQUZEMUZEOEQzMTg3ODEzMjU0OEI4MTdEQTdCQ0JENDMwQzY2NjA5RjgwODYyMEQwMzBDRDVCN0JCM0ZBMDNCMzU0Q0VFQTcwREI1Q0E3NDAzNDI5NzdCOEM0RjhEN0UxQUNCMTFEOTgzNjZCNDg4OTJEQjU5RDc2QTEwOEU1QTdEODUwRTNGNTEzNTNGMzJBRkNFN0JBQTk2NTM2RDU3NzM3Q0I4MTk3RUM4MzFBN0E3QjI0OTk4MUZERkI0NkNCNjk0OUQ3OTFEN0ZBQTQ3QjEzNDA1MkRFRTY4MEU0RjJDNEI2MTA3N0VEMTRDQ0I0NkRFRjhEODhBODVGNjQ2NEVGQTRFMzBCNkJGMkFDNjRBQzk4OTg2MkI4QTQ4MDBERUEwQTJERTQ2QTJBMzg3NzVEMzIxRDU0RjRFNzQ3MUY0MkRDMDEzRTRCMTM3ODQxMTJDN0JBNEM2QUMwQTBGMjUwNUQ3QjI5OTdDMUY1MjVGNUM5MjM2MUYyOUU3QURGRTFERjM2NkUyQzZFRUEwRDI1NkI3NDZEMjFENTVGMTYxNzAzQjI0RjRBNjQ2NkYwQzRBNjI5MzlEN0UxRDU1QTRFQ0E0NjUyRkQ2MzhFREE0MjM3MDQ4QkQyQ0ZFMzQwREYzQkREQkY3NjE3OTUzRTFDRjhENzEwODQ0QTMxNTI0MkMzM0E2OUFGRUQyRTg5MTQyRDE4MTU5QzM3RkI2RDdGNDREMTA0NDBEMEZGQTg4MTI1MjUxMDZGQUE0Q0U3NEUzODBDMjY1RDI2RTYzNkMxQzA4QUY3RTNERTNDMjNEQUY2NDdDMTRBNkM0RjFERjU5NDUwRTA1QjgwMDgzQjUzMDVFRkUwNTI3MDNGNjFGM0FBODNCRDUwQ0IwMjA1NjQxQzdDMUM3MjA5NzQzN0JEMzJEMjYwM0UzMTQ0NjNEQzUwMDY5OTkyNUFBNDI0NUZCNkRENTVFRTY4QTlFODVBRTRCRDM3Q0U0OTJGNDkzOTA1RTJDMDMzMTExQTE2MDUwM0NEMUY2QjE2ODAyQ0MwOTEzMjAwOTIyQ0JDOTVGMkYyRDg1RTdGRjBENkZGMEJDNzg5RUIyMzFFM0RCRDVGMjFGRTg2Q0NBQzIxQTY2ODEwNTQ5QzE5QkYxMjQwNEFEMTUyRTMyM0U2NDJCQkU0NEUxNTY1RDBCMURFRTlFNjlBMzIxQjcxNDkzNzNCRjIyMUQ0MzRBNEYyMDQ3MUJBMzMyNDRFQkRFRTMyMjgyOEVDODM5OUNFM0QzMURENzQwQzk5MTJEN0YwNEY0RTcxN0EwNjc2RkQwQUQ4QUI5QjhDM0U5Q0RGRTFDRjk2NTk5M0QzN0FEQzRDMDMyMkZCNzNENTg5RkFFQzJDQjIwOTJEREU3OUM4MDEwQ0Y0RUNFMDMwRDhEMDk1RjI5QTg1QkY2MEFFODQ2RDUyOTY3RUJDQjE2QjE5ODZDM0FBNkQ2OUYyMjE2MUQ5Q0JGRUE2RDg4RTgzQUZCRjg3Njg4OTkyRTU4RkEwQUExNzQwOEU0QTc1MTg4RUFBODhDODVDODcyNDYwNDI4RkVGNDBFNzJCODcxNTgzRkYzOUNENzY3NjcyQjE4QTY4ODJDMThCMERGNTJGRTIyQjRGNEZGRjZFQzk2QzEyQjVCQjA0MjY3MjJDNjcyMzA0ODY5MTg4OTU2NTgxQjc2RTZFQkY1NUFCQzgyOEU2NTdGRUNGRkUzREU2RjgzMTQ2QzdCODgxMUJBNkJFRTgzMTIwRjdFQTMyRkFGNkQ0QTkyM0E1NzdCMzQ2M0U0Q0MxMEVBOTk2QkVGODM3NDVGQjgzN0ZGQ0YzNDY4REQzOENGOTdENENBRjAyOTZCRUNBMTAyM0Y4NjYxMUMzRDFBRjhCOUM4RjI0NjVDMUI0NzBGOUYyN0U3MTBDMzlCNTMzNjZBODM1QkEyMEFDNkVFMDY3OTI0NkM3REY1OEU1OURBNkEzODdBQzUzOTE4Mjg1Mjc1QjQxQUM4OTc3MDZDMzk4RDNERTYxOUM4MkUyNEFDOTIxQjQ3MjNGRDdDRTQyMjA4OTEzRDMxQjY5NzAzQzYwODhEMTgxMzhERTk1MTNEMEZEQjcyMUE2M0VFRTk1RDRBRkZBRTIxMjJFRDBDRDRBRDk2MzQzOUFFODUyQjJBOTMzMTgxQTk3NTlBQUI2NTI0MzU2ODYwNTRCREMwMDkwNEI0QUNGQTZCMzdDNTU4ODhCRDhDMkFCQjc0MjQ2NTQ1RTE4NzlFRDUzNDhEQkREOTdEMzg3OUI1NjJDMjQ0RTQzMkU2M0NBMEU3NDgxMDhCRUU4Q0Q3NTUyQ0Q2Mjc5NTQxRkNFMTFCOTdCNUFGMzcyRjRBNkEyODcwQ0JBNjcyMUMzNERFRDJEMkRBQTUwQ0QyNzRBODVCNDNGQkNDMTNCNDdBQTI1MzhFRUVFRkU4MzMyMjA4NkRBN0Q2MjMzQ0RGNUY3QkQ2QkU5NEU2RjFBODExOTkxNzJGQjA0ODY4RDU0RDZCRkVEQjhCN0YzM0JBQkY5Q0I3RkE2REJCMDA4NDMwMDUwQTVCQjFCREM3OTJEOTZCQjA5QjQwNDgzM0E4MUM3OEQ5MTlCRDE5NkI4RjFBMURGQUMxMTMwMzY2Qjk0RjkzNjE3QTQ1NkQ0ODA5RkM3NjE4QzRCOTkzOURBMkFENDUwNzE3MDhGODNGODhDRTg4NEVDNUI1M0VDQUVDMEJFQTU0NzRGQTA5OURDNjg3MTAzRkE4NzUxMjhGNzFBMDVBREZFNkI5NTdDMEJGRUVGNTdDQjQ2OUUyQkVGNDE2NzYyN0Y4NTAwRDVEQUQ4RDAyMENCRTZCMDVGQkRBNTIwRTc0OUFERDEwM0NCNjM2MUI3RTBGQ0ZDQzQxRDI3OUUyMjk1MEM0Q0UzQkY4QzAwRTlERTYzNzA2RUJBRDIyRkFGQjU3QUQ0QTM2MjJFRTY3RDQ1NjBCNzE2NjY5Q0Y4RTNGODJBNjIxQjU0NTZGRDk1MjU2QTZBMjM4QUUyQkFEN0I4NjlBNzYzMTU3NzQwOTEwNTFGQjQ2MTNERDIxQjNBNTVCMw=="
        renewed_cert = await self._renew_cert(cert, sk_lmk, "R2K")
        assert len(renewed_cert) > 0
        assert isinstance(renewed_cert, str)

    @pytest.mark.asyncio
    async def test_renew_cert_ecp256(self):
        cert = "MIIB5DCCAYqgAwIBAgIIGGYCNn1JNogwCgYIKoZIzj0EAwIwUDELMAkGA1UEBhMCRUcxDjAMBgNVBAgMBUNhaXJvMQ4wDAYDVQQHDAVDYWlybzEPMA0GA1UECgwGUGF5bW9iMRAwDgYDVQQDDAdSb290LUNBMB4XDTI1MDkxNzA3NDUzN1oXDTI2MDkxNzA3NDUzN1owUDELMAkGA1UEBhMCRUcxDjAMBgNVBAgMBUNhaXJvMQ4wDAYDVQQHDAVDYWlybzEPMA0GA1UECgwGUGF5bW9iMRAwDgYDVQQDDAdSb290LUNBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE-yNjW1SqnHsicAqruzVip9xkv--ZYDoTzK5or-rPTAEoGamiq7BqJNBqCpgL8oFzNyFlq_xxYS5cb15pFqxp96NOMEwwKQYDVR0OBCIEIJlosxhE-WkP6LperxAiu9zbPfSJgsXHlPRalfClsZdLMA8GA1UdEwEB_wQFMAMBAf8wDgYDVR0PAQH_BAQDAgGGMAoGCCqGSM49BAMCA0gAMEUCIQDsTLUn9P5MMZUSGrAR57Np4IKU4AGf-ig04IddVpXrugIgG_kdu2Haz_HJJuu1z-DrBkrdAAl8q9Zr2n09431jP3M="
        sk_lmk = "RDAzMzZTMEVTMDBFMDAwMDAyODkwQjAxMzM5MzRGOUZBQjVDNjg0ODhCQjVBMzI3N0I0OUM3RTlGOTk1MDhEOUYyMzg3OTNFREJDQjlBNDlDN0E2NUE2OTQzM0QwMEJDMTVFRDcwNzMzRTI1OUNGRTBGNkMwNDgyMzhBMTVBOEUwODg0NDFDMTg3NzVDNDc5OEFBQjA2RUZDOEI2ODg3MEVGRkU1MjEyQTEzQzc1QkY5RUQ5NkExOEZENjMwM0I1NUIwNTA3Qjg5OEE3NzAzMEZBOTU2MUY4REExQTExRjEwQ0JGMDU2OEVEQUIwRTcwQjk3MUIyRDYyNjdBRUEwNkMzOUM3MzREQkFENDA1QkY2OENCMEUzMDc0MzAxMkRFNTA4NDQ4MTEzNEIzQkUzRDI5OTkwMTE1Q0QwMEZGNjE2RjE4OTlEMzQyOTBDNzVC"
        renewed_cert = await self._renew_cert(cert, sk_lmk, "ECP256")
        assert len(renewed_cert) > 0
        assert isinstance(renewed_cert, str)

    @pytest.mark.asyncio
    async def test_crl_mgmt_ecp256(self):
        cert = "MIIB5DCCAYqgAwIBAgIIGGYCNn1JNogwCgYIKoZIzj0EAwIwUDELMAkGA1UEBhMCRUcxDjAMBgNVBAgMBUNhaXJvMQ4wDAYDVQQHDAVDYWlybzEPMA0GA1UECgwGUGF5bW9iMRAwDgYDVQQDDAdSb290LUNBMB4XDTI1MDkxNzA3NDUzN1oXDTI2MDkxNzA3NDUzN1owUDELMAkGA1UEBhMCRUcxDjAMBgNVBAgMBUNhaXJvMQ4wDAYDVQQHDAVDYWlybzEPMA0GA1UECgwGUGF5bW9iMRAwDgYDVQQDDAdSb290LUNBMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE-yNjW1SqnHsicAqruzVip9xkv--ZYDoTzK5or-rPTAEoGamiq7BqJNBqCpgL8oFzNyFlq_xxYS5cb15pFqxp96NOMEwwKQYDVR0OBCIEIJlosxhE-WkP6LperxAiu9zbPfSJgsXHlPRalfClsZdLMA8GA1UdEwEB_wQFMAMBAf8wDgYDVR0PAQH_BAQDAgGGMAoGCCqGSM49BAMCA0gAMEUCIQDsTLUn9P5MMZUSGrAR57Np4IKU4AGf-ig04IddVpXrugIgG_kdu2Haz_HJJuu1z-DrBkrdAAl8q9Zr2n09431jP3M="
        sk_lmk = "RDAzMzZTMEVTMDBFMDAwMDAyODkwQjAxMzM5MzRGOUZBQjVDNjg0ODhCQjVBMzI3N0I0OUM3RTlGOTk1MDhEOUYyMzg3OTNFREJDQjlBNDlDN0E2NUE2OTQzM0QwMEJDMTVFRDcwNzMzRTI1OUNGRTBGNkMwNDgyMzhBMTVBOEUwODg0NDFDMTg3NzVDNDc5OEFBQjA2RUZDOEI2ODg3MEVGRkU1MjEyQTEzQzc1QkY5RUQ5NkExOEZENjMwM0I1NUIwNTA3Qjg5OEE3NzAzMEZBOTU2MUY4REExQTExRjEwQ0JGMDU2OEVEQUIwRTcwQjk3MUIyRDYyNjdBRUEwNkMzOUM3MzREQkFENDA1QkY2OENCMEUzMDc0MzAxMkRFNTA4NDQ4MTEzNEIzQkUzRDI5OTkwMTE1Q0QwMEZGNjE2RjE4OTlEMzQyOTBDNzVC"
        crl = await self._crl_mgmt(cert, sk_lmk, "ECP256")
        assert len(crl) > 0
        assert isinstance(crl, str)
    
    @pytest.mark.asyncio
    async def test_crl_mgmt_r2k(self):
        cert = "MIIDajCCAlSgAwIBAgIIGGYC2wHUAZAwCwYJKoZIhvcNAQELMFAxCzAJBgNVBAYTAkVHMQ4wDAYDVQQIDAVDYWlybzEOMAwGA1UEBwwFQ2Fpcm8xDzANBgNVBAoMBlBheW1vYjEQMA4GA1UEAwwHUm9vdC1DQTAeFw0yNTA5MTcwNzU3MjRaFw0yNjA5MTcwNzU3MjRaMFAxCzAJBgNVBAYTAkVHMQ4wDAYDVQQIDAVDYWlybzEOMAwGA1UEBwwFQ2Fpcm8xDzANBgNVBAoMBlBheW1vYjEQMA4GA1UEAwwHUm9vdC1DQTCCASAwCwYJKoZIhvcNAQEBA4IBDwAwggEKAoIBAQDY79hCukfKDNejbRa6hTKMozdBWan7LrwYBU0P5np1aJpdjOj261Tr-PIWKFjE4ZfES-bwZykZWYGBWOw4b94ZULtFc9E98r08R8gYfl9aCUM04YVwJrTSZVGwQy7S0U73iHiaZa7jE5iqXBHbrM_fWv_txu_chLybb37aC9ofD_80-0cBqavT7ssYHFYGzmF5AK2X-oot2-Ekj28oqdcnshFJ6oGEkN1poD9Nrp1i2QjQB7UscjqkZQ3ONDXniQdF6RkvbOcTIjClfAlrncX9KNCFwa_xjVyBiKhYWs5lpJGFfr_e8e15uSC4aK434L6bRTRdHaKqhQYiJtUVNlw_AgMBAAGjTjBMMCkGA1UdDgQiBCALk1Ot-NUPYzG7YyJkFIE7kGnx3Wcip6EAsYMsIrjEwjAPBgNVHRMBAf8EBTADAQH_MA4GA1UdDwEB_wQEAwIBhjALBgkqhkiG9w0BAQsDggEBAFK6TaAORcwSnlG8az-bsC1oaLSEgrPTByJnsDB00kb0-8Qgj8mmddtxeRBCMXxPtubIIG39LD3oqdH46yWEMO7yWbiEoTQR4oZIhvn8p0f-DOgoyxJ3S86fD2_N5n-3S-SIa0eXtuc1r1iJxazQwDomlSW3sMTIvuKKugE9x3ytyT-vknAi-rm7m4gpFYDjpzJ34l4A3Fcyy3_kP0n4Aq4mxgyCC-8dVV3g6z5yL_ILwBAp5BfqFSy8xgN0qpE5n3luewDRjHELK_yNg3zOjzikeG9ADR-h9OyynDERb_l7-vc8EGfs4gUn9swx6cIrpeGGjiVZxfG6sMDsabYCziE="
        sk_lmk = "RDI1MTJTMEVTMDBFMDAwMDYxQjA3RTZBNTQyNzdCOTMyRjU4MDRERTk3NzhBMzRFM0VDQjVGQjQ0OEYzRDI2ODRFMDhBMjYyNjkzMUY4MUFGQ0Q0NjY0NjA1QUJDMUQwRDhGNzI2QjYxOEE4MzhFODA2OUQyNDgyQjRBOTk0QUY1MzZEMzkxQTBEMEY5OUM0ODk3NDI0NUMwNEJCN0MzQ0NBNEE2QTZFMzNBQzM0Mjg0ODlBMEIxRUEyOTE4Q0ZDQzFERDZFQUZEMUZEOEQzMTg3ODEzMjU0OEI4MTdEQTdCQ0JENDMwQzY2NjA5RjgwODYyMEQwMzBDRDVCN0JCM0ZBMDNCMzU0Q0VFQTcwREI1Q0E3NDAzNDI5NzdCOEM0RjhEN0UxQUNCMTFEOTgzNjZCNDg4OTJEQjU5RDc2QTEwOEU1QTdEODUwRTNGNTEzNTNGMzJBRkNFN0JBQTk2NTM2RDU3NzM3Q0I4MTk3RUM4MzFBN0E3QjI0OTk4MUZERkI0NkNCNjk0OUQ3OTFEN0ZBQTQ3QjEzNDA1MkRFRTY4MEU0RjJDNEI2MTA3N0VEMTRDQ0I0NkRFRjhEODhBODVGNjQ2NEVGQTRFMzBCNkJGMkFDNjRBQzk4OTg2MkI4QTQ4MDBERUEwQTJERTQ2QTJBMzg3NzVEMzIxRDU0RjRFNzQ3MUY0MkRDMDEzRTRCMTM3ODQxMTJDN0JBNEM2QUMwQTBGMjUwNUQ3QjI5OTdDMUY1MjVGNUM5MjM2MUYyOUU3QURGRTFERjM2NkUyQzZFRUEwRDI1NkI3NDZEMjFENTVGMTYxNzAzQjI0RjRBNjQ2NkYwQzRBNjI5MzlEN0UxRDU1QTRFQ0E0NjUyRkQ2MzhFREE0MjM3MDQ4QkQyQ0ZFMzQwREYzQkREQkY3NjE3OTUzRTFDRjhENzEwODQ0QTMxNTI0MkMzM0E2OUFGRUQyRTg5MTQyRDE4MTU5QzM3RkI2RDdGNDREMTA0NDBEMEZGQTg4MTI1MjUxMDZGQUE0Q0U3NEUzODBDMjY1RDI2RTYzNkMxQzA4QUY3RTNERTNDMjNEQUY2NDdDMTRBNkM0RjFERjU5NDUwRTA1QjgwMDgzQjUzMDVFRkUwNTI3MDNGNjFGM0FBODNCRDUwQ0IwMjA1NjQxQzdDMUM3MjA5NzQzN0JEMzJEMjYwM0UzMTQ0NjNEQzUwMDY5OTkyNUFBNDI0NUZCNkRENTVFRTY4QTlFODVBRTRCRDM3Q0U0OTJGNDkzOTA1RTJDMDMzMTExQTE2MDUwM0NEMUY2QjE2ODAyQ0MwOTEzMjAwOTIyQ0JDOTVGMkYyRDg1RTdGRjBENkZGMEJDNzg5RUIyMzFFM0RCRDVGMjFGRTg2Q0NBQzIxQTY2ODEwNTQ5QzE5QkYxMjQwNEFEMTUyRTMyM0U2NDJCQkU0NEUxNTY1RDBCMURFRTlFNjlBMzIxQjcxNDkzNzNCRjIyMUQ0MzRBNEYyMDQ3MUJBMzMyNDRFQkRFRTMyMjgyOEVDODM5OUNFM0QzMURENzQwQzk5MTJEN0YwNEY0RTcxN0EwNjc2RkQwQUQ4QUI5QjhDM0U5Q0RGRTFDRjk2NTk5M0QzN0FEQzRDMDMyMkZCNzNENTg5RkFFQzJDQjIwOTJEREU3OUM4MDEwQ0Y0RUNFMDMwRDhEMDk1RjI5QTg1QkY2MEFFODQ2RDUyOTY3RUJDQjE2QjE5ODZDM0FBNkQ2OUYyMjE2MUQ5Q0JGRUE2RDg4RTgzQUZCRjg3Njg4OTkyRTU4RkEwQUExNzQwOEU0QTc1MTg4RUFBODhDODVDODcyNDYwNDI4RkVGNDBFNzJCODcxNTgzRkYzOUNENzY3NjcyQjE4QTY4ODJDMThCMERGNTJGRTIyQjRGNEZGRjZFQzk2QzEyQjVCQjA0MjY3MjJDNjcyMzA0ODY5MTg4OTU2NTgxQjc2RTZFQkY1NUFCQzgyOEU2NTdGRUNGRkUzREU2RjgzMTQ2QzdCODgxMUJBNkJFRTgzMTIwRjdFQTMyRkFGNkQ0QTkyM0E1NzdCMzQ2M0U0Q0MxMEVBOTk2QkVGODM3NDVGQjgzN0ZGQ0YzNDY4REQzOENGOTdENENBRjAyOTZCRUNBMTAyM0Y4NjYxMUMzRDFBRjhCOUM4RjI0NjVDMUI0NzBGOUYyN0U3MTBDMzlCNTMzNjZBODM1QkEyMEFDNkVFMDY3OTI0NkM3REY1OEU1OURBNkEzODdBQzUzOTE4Mjg1Mjc1QjQxQUM4OTc3MDZDMzk4RDNERTYxOUM4MkUyNEFDOTIxQjQ3MjNGRDdDRTQyMjA4OTEzRDMxQjY5NzAzQzYwODhEMTgxMzhERTk1MTNEMEZEQjcyMUE2M0VFRTk1RDRBRkZBRTIxMjJFRDBDRDRBRDk2MzQzOUFFODUyQjJBOTMzMTgxQTk3NTlBQUI2NTI0MzU2ODYwNTRCREMwMDkwNEI0QUNGQTZCMzdDNTU4ODhCRDhDMkFCQjc0MjQ2NTQ1RTE4NzlFRDUzNDhEQkREOTdEMzg3OUI1NjJDMjQ0RTQzMkU2M0NBMEU3NDgxMDhCRUU4Q0Q3NTUyQ0Q2Mjc5NTQxRkNFMTFCOTdCNUFGMzcyRjRBNkEyODcwQ0JBNjcyMUMzNERFRDJEMkRBQTUwQ0QyNzRBODVCNDNGQkNDMTNCNDdBQTI1MzhFRUVFRkU4MzMyMjA4NkRBN0Q2MjMzQ0RGNUY3QkQ2QkU5NEU2RjFBODExOTkxNzJGQjA0ODY4RDU0RDZCRkVEQjhCN0YzM0JBQkY5Q0I3RkE2REJCMDA4NDMwMDUwQTVCQjFCREM3OTJEOTZCQjA5QjQwNDgzM0E4MUM3OEQ5MTlCRDE5NkI4RjFBMURGQUMxMTMwMzY2Qjk0RjkzNjE3QTQ1NkQ0ODA5RkM3NjE4QzRCOTkzOURBMkFENDUwNzE3MDhGODNGODhDRTg4NEVDNUI1M0VDQUVDMEJFQTU0NzRGQTA5OURDNjg3MTAzRkE4NzUxMjhGNzFBMDVBREZFNkI5NTdDMEJGRUVGNTdDQjQ2OUUyQkVGNDE2NzYyN0Y4NTAwRDVEQUQ4RDAyMENCRTZCMDVGQkRBNTIwRTc0OUFERDEwM0NCNjM2MUI3RTBGQ0ZDQzQxRDI3OUUyMjk1MEM0Q0UzQkY4QzAwRTlERTYzNzA2RUJBRDIyRkFGQjU3QUQ0QTM2MjJFRTY3RDQ1NjBCNzE2NjY5Q0Y4RTNGODJBNjIxQjU0NTZGRDk1MjU2QTZBMjM4QUUyQkFEN0I4NjlBNzYzMTU3NzQwOTEwNTFGQjQ2MTNERDIxQjNBNTVCMw=="
        crl = await self._crl_mgmt(cert, sk_lmk, "R2K")
        assert len(crl) > 0
        assert isinstance(crl, str)

    def test_get_server_uc_dependency_real(self):
        result = get_server_uc(self.client)
        assert isinstance(result, ServerUsecase)

if __name__ == "__main__":
    test_pki_router = TestPKIRouter()
    test_pki_router.setup_method()
    asyncio.run(test_pki_router.test_health())